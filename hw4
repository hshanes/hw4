#%%
import numpy as np
from numpy.linalg import norm
import random
from scipy.sparse import tril, triu, diags, csr_matrix
Inf = np.inf


#%%
def getMatrix(n=10, isDiagDom=True):
    '''
    Return an nxn matrix which is the discretization matrix
    from finite difference for a diffusion problem.
    To visualize A: use plt.spy(A.toarray())
    '''
    # Representation of sparse matrix and right-hand side
    assert n >= 2
    n -= 1
    diagonal  = np.zeros(n+1)
    lower     = np.zeros(n)
    upper     = np.zeros(n)

    # Precompute sparse matrix
    if isDiagDom:
        diagonal[:] = 2 + 1/n
    else:
        diagonal[:] = 2
    lower[:] = -1  #1
    upper[:] = -1  #1
    # Insert boundary conditions
    diagonal[0] = 1
    upper[0] = 0
    diagonal[n] = 1
    lower[-1] = 0

    
    A = diags(
        diagonals=[diagonal, lower, upper],
        offsets=[0, -1, 1], shape=(n+1, n+1),
        format='csr')

    return A

def getAuxMatrix(A):
    '''
    return D, L, U matrices for Jacobi or Gauss-Seidel
    D: array
    L, U: matrices
    '''
    # m = A.shape[0]
    D = csr_matrix.diagonal(A)
    L = -tril(A, k=-1)
    U = -triu(A, k=1)
    return D, L, U


#%%
def jacobiIteration(A, b, x0=None, tol=1e-13, numIter=100):
    '''
    Jacobi Iteration
    A: nxn matrix
    b: (n, ) vector
    x0: initial guess
    numIter: total number of iterations
    tol: algorithm stops if ||x^{k+1} - x^{k}|| < tol
    returns x
    x: solution array such that x[i] is the ith iterate
    '''
    n = A.shape[0]
    x=np.zeros((numIter+1,n))
    if x0 is not None:
        x[0] = x0
    D, L, U = getAuxMatrix(A)
    for k in range(numIter):
        x[k+1] = ((L+U)@x[k])/D + b/D
        if norm(x[k+1]-x[k]) < tol:
            break
        
    return x[:k+1]
    
#%% 

def simpleOptim(A,b):
    xmin=jacobiIteration(A, b)
    
    fmin=1/2*np.transpose(xmin)*A*xmin-np.transpose(b)*xmin
    
    return fmin, xmin
